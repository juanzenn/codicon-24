datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  // Required columns for NextAuth 
  name          String?
  image         String? // Should be set with the avatar image from the registered auth provider
  email         String?   @unique // Should be set by the auth provider
  emailVerified DateTime?

  accounts      Account[]
  sessions      Session[]
  familyMembers FamilyMember[]
  memories      Memory[]
  Album         Album[]
}

model FamilyMember {
  id String @id @default(cuid())

  relationship String
  name         String
  color        String?
  createdAt    DateTime @default(now())

  owner    User     @relation(fields: [ownerId], references: [id])
  ownerId  String
  memories Memory[]
}

model Memory {
  id String @id @default(cuid())

  title       String
  date        DateTime
  isArchived  Boolean  @default(false)
  description String?
  fileUrl     String?

  owner         User           @relation(fields: [ownerId], references: [id])
  ownerId       String
  familyMembers FamilyMember[]
  albumes       Album[]
}

model Album {
  id String @id @default(cuid())

  title       String
  date        DateTime
  isArchived  Boolean  @default(false)
  description String?

  owner    User     @relation(fields: [ownerId], references: [id])
  ownerId  String
  memories Memory[]
}
